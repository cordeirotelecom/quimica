'use client'

import { useState, useEffect } from 'react'
import ProfessionalHeader from '../../components/ProfessionalHeader'
import ExperimentCard from '../../components/ExperimentCard'
import { FlaskConical, Filter, Search, SortDesc, Grid, List, Target, Zap, TrendingUp, X } from 'lucide-react'

interface Experiment {
  id: string
  title: string
  description: string
  difficulty: 'Iniciante' | 'Intermedi√°rio' | 'Avan√ßado' | 'Especialista'
  duration: number
  category: string
  subcategory: string
  rating: number
  completions: number
  equipment: string[]
  chemicals: string[]
  safetyLevel: 'Baixo' | 'M√©dio' | 'Alto'
  objectives: string[]
  procedure: string[]
  theory: string
  applications: string[]
  videoUrl?: string
  isNew?: boolean
  isPopular?: boolean
  isPremium?: boolean
  isFeatured?: boolean
  thumbnail: string
  tags: string[]
  prerequisites?: string[]
  learningOutcomes: string[]
  relatedExperiments: string[]
}

export default function ExperimentosPage() {
  const [experiments, setExperiments] = useState<Experiment[]>([])
  const [filteredExperiments, setFilteredExperiments] = useState<Experiment[]>([])
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [selectedDifficulty, setSelectedDifficulty] = useState('all')
  const [selectedSafety, setSelectedSafety] = useState('all')
  const [sortBy, setSortBy] = useState<'popular' | 'rating' | 'newest' | 'duration'>('popular')
  const [searchQuery, setSearchQuery] = useState('')
  const [isLoading, setIsLoading] = useState(true)
  const [selectedExperiment, setSelectedExperiment] = useState<Experiment | null>(null)
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')

  const headerStats = [
    { label: 'Experimentos', value: '2.500+', color: 'text-blue-400' },
    { label: 'Realizados', value: '45.8M+', color: 'text-green-400' },
    { label: 'Satisfa√ß√£o', value: '99.2%', color: 'text-purple-400' },
    { label: 'Pa√≠ses', value: '195', color: 'text-orange-400' }
  ]

  const categories = [
    'Qu√≠mica Geral', 'Qu√≠mica Org√¢nica', 'F√≠sico-Qu√≠mica', 
    'Qu√≠mica Anal√≠tica', 'Bioqu√≠mica', 'Eletroqu√≠mica'
  ]

  const mockExperiments: Experiment[] = [
    {
      id: '1',
      title: 'Titula√ß√£o √Åcido-Base com Curva de pH',
      description: 'Realize uma titula√ß√£o completa com monitoramento em tempo real da curva de pH, identificando pontos de equival√™ncia e usando indicadores visuais.',
      difficulty: 'Intermedi√°rio',
      duration: 45,
      category: 'Qu√≠mica Anal√≠tica',
      subcategory: 'An√°lise Volum√©trica',
      rating: 4.9,
      completions: 234567,
      equipment: ['Bureta digital', 'Erlenmeyer', 'pHmetro', 'Agitador magn√©tico', 'Pipeta volum√©trica'],
      chemicals: ['HCl 0,1 M', 'NaOH 0,1 M', 'Fenolftale√≠na', 'Azul de bromotimol'],
      safetyLevel: 'M√©dio',
      objectives: [
        'Compreender o conceito de titula√ß√£o',
        'Interpretar curvas de titula√ß√£o',
        'Calcular concentra√ß√µes desconhecidas',
        'Identificar pontos de equival√™ncia'
      ],
      procedure: [
        'Preparar a solu√ß√£o de HCl 0,1 M no erlenmeyer',
        'Adicionar algumas gotas de indicador',
        'Encher a bureta com NaOH 0,1 M',
        'Titular gota a gota at√© mudan√ßa de cor',
        'Registrar o volume gasto na equival√™ncia'
      ],
      theory: 'A titula√ß√£o √© um m√©todo anal√≠tico quantitativo usado para determinar a concentra√ß√£o de uma solu√ß√£o atrav√©s da rea√ß√£o com outra solu√ß√£o de concentra√ß√£o conhecida.',
      applications: ['Controle de qualidade', 'An√°lise ambiental', 'Ind√∫stria farmac√™utica'],
      isPopular: true,
      isFeatured: true,
      thumbnail: 'üß™',
      tags: ['titula√ß√£o', 'pH', '√°cido', 'base', 'indicador'],
      learningOutcomes: ['Dom√≠nio de t√©cnicas anal√≠ticas', 'Interpreta√ß√£o de dados'],
      relatedExperiments: ['2', '3']
    },
    {
      id: '2',
      title: 'S√≠ntese e Cristaliza√ß√£o do Sulfato de Cobre',
      description: 'Sintetize cristais de sulfato de cobre pentahidratado atrav√©s de rea√ß√£o controlada e observe o processo de cristaliza√ß√£o em diferentes condi√ß√µes.',
      difficulty: 'Iniciante',
      duration: 60,
      category: 'Qu√≠mica Geral',
      subcategory: 'S√≠ntese Inorg√¢nica',
      rating: 4.7,
      completions: 189234,
      equipment: ['B√©quer', 'Bast√£o de vidro', 'Placa de aquecimento', 'Funil', 'Papel filtro'],
      chemicals: ['√Åcido sulf√∫rico', '√ìxido de cobre', '√Ågua destilada'],
      safetyLevel: 'Alto',
      objectives: [
        'Realizar s√≠ntese inorg√¢nica segura',
        'Observar processo de cristaliza√ß√£o',
        'Compreender estruturas cristalinas',
        'Calcular rendimento da rea√ß√£o'
      ],
      procedure: [
        'Misturar √≥xido de cobre com √°cido sulf√∫rico dilu√≠do',
        'Aquecer a mistura em banho-maria',
        'Filtrar a solu√ß√£o para remover impurezas',
        'Concentrar por evapora√ß√£o controlada',
        'Observar forma√ß√£o dos cristais azuis'
      ],
      theory: 'A cristaliza√ß√£o √© um processo de separa√ß√£o onde s√≥lidos dissolvidos formam cristais organizados ao atingir condi√ß√µes de supersatura√ß√£o.',
      applications: ['Purifica√ß√£o de compostos', 'Produ√ß√£o industrial', 'Caracteriza√ß√£o de materiais'],
      isNew: true,
      thumbnail: 'üíé',
      tags: ['cristaliza√ß√£o', 's√≠ntese', 'sulfato', 'cobre', 'inorg√¢nica'],
      learningOutcomes: ['T√©cnicas de s√≠ntese', 'An√°lise de cristais'],
      relatedExperiments: ['1', '4']
    },
    {
      id: '3',
      title: 'Eletroqu√≠mica: Pilha de Daniell Interativa',
      description: 'Construa uma pilha galv√¢nica cl√°ssica e monitore a diferen√ßa de potencial, fluxo de el√©trons e mudan√ßas nas solu√ß√µes em tempo real.',
      difficulty: 'Avan√ßado',
      duration: 50,
      category: 'Eletroqu√≠mica',
      subcategory: 'C√©lulas Galv√¢nicas',
      rating: 4.8,
      completions: 156789,
      equipment: ['Volt√≠metro digital', 'Eletrodos de Cu e Zn', 'Ponte salina', 'B√©queres', 'Fios condutores'],
      chemicals: ['CuSO‚ÇÑ 1M', 'ZnSO‚ÇÑ 1M', 'KCl (ponte salina)'],
      safetyLevel: 'Baixo',
      objectives: [
        'Construir c√©lulas galv√¢nicas',
        'Medir potenciais de eletrodo',
        'Compreender fluxo eletr√¥nico',
        'Aplicar equa√ß√£o de Nernst'
      ],
      procedure: [
        'Preparar solu√ß√µes de sulfato de cobre e zinco',
        'Conectar eletrodos aos respectivos b√©queres',
        'Instalar ponte salina entre as solu√ß√µes',
        'Conectar volt√≠metro e medir ddp inicial',
        'Acompanhar varia√ß√£o do potencial no tempo'
      ],
      theory: 'C√©lulas galv√¢nicas convertem energia qu√≠mica em el√©trica atrav√©s de rea√ß√µes redox espont√¢neas, com el√©trons fluindo do √¢nodo para o c√°todo.',
      applications: ['Baterias comerciais', 'Prote√ß√£o cat√≥dica', 'Sensores eletroqu√≠micos'],
      isPopular: true,
      thumbnail: '‚ö°',
      tags: ['eletroqu√≠mica', 'pilha', 'potencial', 'eletrodo', 'redox'],
      learningOutcomes: ['Princ√≠pios eletroqu√≠micos', 'Medi√ß√µes el√©tricas'],
      relatedExperiments: ['1', '5']
    },
    {
      id: '4',
      title: 'S√≠ntese de Sab√£o Natural - Saponifica√ß√£o',
      description: 'Produza sab√£o artesanal atrav√©s da rea√ß√£o de saponifica√ß√£o, explorando a qu√≠mica dos √©steres e bases fortes.',
      difficulty: 'Intermedi√°rio',
      duration: 90,
      category: 'Qu√≠mica Org√¢nica',
      subcategory: 'Rea√ß√µes de Substitui√ß√£o',
      rating: 4.7,
      completions: 234567,
      equipment: ['B√©queres grandes', 'Bast√£o de vidro', 'Balan√ßa', 'Term√¥metro', 'Formas de silicone'],
      chemicals: ['√ìleo de coco/oliva', 'Hidr√≥xido de s√≥dio (NaOH)', '√Ågua destilada', 'Ess√™ncias naturais'],
      safetyLevel: 'M√©dio',
      objectives: [
        'Compreender rea√ß√µes de saponifica√ß√£o',
        'Produzir sab√£o artesanal',
        'Calcular propor√ß√µes estequiom√©tricas',
        'Aplicar seguran√ßa qu√≠mica'
      ],
      procedure: [
        'Pesar √≥leo e calcular quantidade de NaOH necess√°ria',
        'Dissolver NaOH em √°gua com cuidado (exot√©rmica)',
        'Aquecer √≥leo a temperatura adequada',
        'Misturar lentamente NaOH ao √≥leo mexendo constantemente',
        'Adicionar ess√™ncias e despejar nas formas'
      ],
      theory: 'A saponifica√ß√£o √© uma rea√ß√£o entre √©steres (√≥leos/gorduras) e bases fortes, produzindo sab√£o (sal do √°cido graxo) e glicerol.',
      applications: ['Ind√∫stria cosm√©tica', 'Produtos de limpeza', 'Sabonetes artesanais'],
      isNew: true,
      thumbnail: 'üßº',
      tags: ['org√¢nica', '√©ster', 'saponifica√ß√£o', 'artesanal', 'sustent√°vel'],
      learningOutcomes: ['Qu√≠mica org√¢nica aplicada', 'Sustentabilidade qu√≠mica'],
      relatedExperiments: ['5', '6']
    },
    {
      id: '5',
      title: 'Cristaliza√ß√£o de Sulfato de Cobre - Geometria Molecular',
      description: 'Forme cristais perfeitos de sulfato de cobre pentahidratado e estude estruturas cristalinas e liga√ß√µes qu√≠micas.',
      difficulty: 'Iniciante',
      duration: 120,
      category: 'Qu√≠mica Geral',
      subcategory: 'Estrutura da Mat√©ria',
      rating: 4.9,
      completions: 456789,
      equipment: ['B√©quer', 'Bast√£o de vidro', 'Fio de nylon', 'Lupa', 'Filtro'],
      chemicals: ['Sulfato de cobre anidro', '√Ågua destilada'],
      safetyLevel: 'Baixo',
      objectives: [
        'Formar cristais perfeitos',
        'Observar estruturas cristalinas',
        'Compreender solubilidade',
        'Estudar hidrata√ß√£o molecular'
      ],
      procedure: [
        'Preparar solu√ß√£o saturada de sulfato de cobre',
        'Filtrar impurezas da solu√ß√£o',
        'Pendurar cristal semente em fio de nylon',
        'Mergulhar na solu√ß√£o e aguardar crescimento',
        'Observar forma√ß√£o di√°ria dos cristais'
      ],
      theory: 'Cristaliza√ß√£o √© o processo de forma√ß√£o de s√≥lidos cristalinos a partir de solu√ß√µes, seguindo padr√µes geom√©tricos espec√≠ficos.',
      applications: ['Purifica√ß√£o de compostos', 'Ind√∫stria farmac√™utica', 'Eletr√¥nica'],
      isPopular: true,
      isFeatured: true,
      thumbnail: 'üíé',
      tags: ['cristais', 'solubilidade', 'geometria', 'estrutura', 'purifica√ß√£o'],
      learningOutcomes: ['Estruturas cristalinas', 'Propriedades da mat√©ria'],
      relatedExperiments: ['1', '3']
    },
    {
      id: '6',
      title: 'Extra√ß√£o de DNA de Morango - Bioqu√≠mica Molecular',
      description: 'Extraia DNA vis√≠vel de morangos usando materiais caseiros e explore a estrutura da vida.',
      difficulty: 'Iniciante',
      duration: 45,
      category: 'Bioqu√≠mica',
      subcategory: '√Åcidos Nucleicos',
      rating: 4.8,
      completions: 345678,
      equipment: ['Liquidificador', 'Coador', 'Tubos de ensaio', 'Pipeta', 'B√©quer'],
      chemicals: ['Morangos', 'Detergente', 'Sal de cozinha', '√Ålcool gelado'],
      safetyLevel: 'Baixo',
      objectives: [
        'Isolar DNA de c√©lulas vegetais',
        'Compreender estrutura celular',
        'Visualizar material gen√©tico',
        'Aplicar t√©cnicas de extra√ß√£o'
      ],
      procedure: [
        'Triturar morangos com solu√ß√£o de sal e detergente',
        'Filtrar mistura para remover fragmentos',
        'Adicionar √°lcool gelado lentamente',
        'Observar precipita√ß√£o do DNA',
        'Coletar DNA com pipeta'
      ],
      theory: 'O DNA pode ser extra√≠do rompendo membranas celulares com detergente e precipitando com √°lcool devido √† sua insolubilidade.',
      applications: ['Medicina forense', 'Biotecnologia', 'Testes gen√©ticos'],
      isNew: true,
      isPopular: true,
      thumbnail: 'üß¨',
      tags: ['DNA', 'bioqu√≠mica', 'gen√©tica', 'extra√ß√£o', 'molecular'],
      learningOutcomes: ['Biologia molecular', 'T√©cnicas laboratoriais'],
      relatedExperiments: ['7', '8']
    }
  ]

  useEffect(() => {
    // Simular carregamento
    setTimeout(() => {
      setExperiments(mockExperiments)
      setFilteredExperiments(mockExperiments)
      setIsLoading(false)
    }, 1500)
  }, [])

  useEffect(() => {
    applyFilters()
  }, [selectedCategory, selectedDifficulty, selectedSafety, searchQuery, sortBy, experiments])

  const applyFilters = () => {
    let filtered = [...experiments]

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(exp => exp.category === selectedCategory)
    }

    if (selectedDifficulty !== 'all') {
      filtered = filtered.filter(exp => exp.difficulty === selectedDifficulty)
    }

    if (selectedSafety !== 'all') {
      filtered = filtered.filter(exp => exp.safetyLevel === selectedSafety)
    }

    if (searchQuery) {
      filtered = filtered.filter(exp => 
        exp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        exp.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        exp.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
      )
    }

    switch (sortBy) {
      case 'popular':
        filtered.sort((a, b) => b.completions - a.completions)
        break
      case 'rating':
        filtered.sort((a, b) => b.rating - a.rating)
        break
      case 'newest':
        filtered.sort((a, b) => (b.isNew ? 1 : 0) - (a.isNew ? 1 : 0))
        break
      case 'duration':
        filtered.sort((a, b) => a.duration - b.duration)
        break
    }

    setFilteredExperiments(filtered)
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Carregando laborat√≥rio virtual...</h2>
          <p className="text-gray-600">Preparando experimentos profissionais</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Professional Header */}
      <ProfessionalHeader
        title="Laborat√≥rio Virtual"
        subtitle="Realize experimentos qu√≠micos seguros e interativos com tecnologia de ponta. Mais de 2.500 experimentos profissionais ao seu alcance."
        icon={<FlaskConical className="h-8 w-8 text-white" />}
        stats={headerStats}
      />

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid lg:grid-cols-4 gap-8">
          {/* Advanced Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            {/* Search Section */}
            <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center space-x-3 mb-4">
                <div className="p-2 bg-blue-50 rounded-lg">
                  <Search className="h-5 w-5 text-blue-600" />
                </div>
                <h3 className="font-bold text-gray-900">Buscar Experimentos</h3>
              </div>
              <div className="relative">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Digite palavras-chave..."
                  className="w-full p-4 pr-12 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                />
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              </div>
            </div>

            {/* Professional Filters */}
            <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center space-x-3 mb-6">
                <div className="p-2 bg-purple-50 rounded-lg">
                  <Filter className="h-5 w-5 text-purple-600" />
                </div>
                <h3 className="font-bold text-gray-900">Filtros Avan√ßados</h3>
              </div>
              
              <div className="space-y-6">
                {/* Category Filter */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-3">Categoria</label>
                  <select
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="w-full p-3 border-2 border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  >
                    <option value="all">üåü Todas as categorias</option>
                    {categories.map((category) => (
                      <option key={category} value={category}>
                        {category === 'Qu√≠mica Geral' && '‚öóÔ∏è'} 
                        {category === 'Qu√≠mica Org√¢nica' && 'üß¨'} 
                        {category === 'F√≠sico-Qu√≠mica' && '‚öõÔ∏è'} 
                        {category === 'Qu√≠mica Anal√≠tica' && 'üî¨'} 
                        {category === 'Bioqu√≠mica' && 'üß™'} 
                        {category === 'Eletroqu√≠mica' && '‚ö°'} 
                        {category}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Difficulty Filter */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-3">N√≠vel de Dificuldade</label>
                  <div className="space-y-2">
                    {['all', 'Iniciante', 'Intermedi√°rio', 'Avan√ßado', 'Especialista'].map((level) => (
                      <button
                        key={level}
                        onClick={() => setSelectedDifficulty(level)}
                        className={`w-full text-left p-3 rounded-xl transition-all ${
                          selectedDifficulty === level
                            ? 'bg-blue-50 text-blue-700 border-2 border-blue-200'
                            : 'hover:bg-gray-50 border-2 border-transparent'
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <div className={`w-3 h-3 rounded-full ${
                            level === 'Iniciante' ? 'bg-green-500' :
                            level === 'Intermedi√°rio' ? 'bg-yellow-500' :
                            level === 'Avan√ßado' ? 'bg-orange-500' :
                            level === 'Especialista' ? 'bg-red-500' : 'bg-gray-500'
                          }`}></div>
                          <span className="font-medium">
                            {level === 'all' ? 'Todos os n√≠veis' : level}
                          </span>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Access */}
            <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center space-x-3 mb-4">
                <div className="p-2 bg-orange-50 rounded-lg">
                  <Zap className="h-5 w-5 text-orange-600" />
                </div>
                <h3 className="font-bold text-gray-900">Acesso R√°pido</h3>
              </div>
              <div className="space-y-3">
                {[
                  { name: 'Mais Populares', icon: 'üî•', action: () => setSortBy('popular') },
                  { name: 'Melhor Avaliados', icon: '‚≠ê', action: () => setSortBy('rating') },
                  { name: 'Experimentos Novos', icon: '‚ú®', action: () => setSortBy('newest') },
                  { name: 'R√°pidos (< 30min)', icon: '‚ö°', action: () => setSortBy('duration') }
                ].map((item, index) => (
                  <button
                    key={index}
                    onClick={item.action}
                    className="w-full text-left p-3 bg-gray-50 hover:bg-orange-50 rounded-xl transition-colors group"
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-xl">{item.icon}</span>
                      <span className="font-medium text-gray-700 group-hover:text-orange-700">
                        {item.name}
                      </span>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Main Content Area */}
          <div className="lg:col-span-3">
            {/* Control Bar */}
            <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 mb-8">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">
                    {searchQuery ? `Resultados para "${searchQuery}"` : 'Experimentos Dispon√≠veis'}
                  </h2>
                  <p className="text-gray-600">
                    {filteredExperiments.length} experimentos encontrados
                  </p>
                </div>
                
                <div className="flex items-center space-x-4">
                  {/* View Mode Toggle */}
                  <div className="flex items-center bg-gray-100 rounded-lg p-1">
                    <button
                      onClick={() => setViewMode('grid')}
                      className={`p-2 rounded-md transition-colors ${
                        viewMode === 'grid' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600'
                      }`}
                    >
                      <Grid className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => setViewMode('list')}
                      className={`p-2 rounded-md transition-colors ${
                        viewMode === 'list' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600'
                      }`}
                    >
                      <List className="h-4 w-4" />
                    </button>
                  </div>

                  {/* Sort Dropdown */}
                  <div className="flex items-center space-x-2">
                    <SortDesc className="h-4 w-4 text-gray-500" />
                    <select
                      value={sortBy}
                      onChange={(e) => setSortBy(e.target.value as 'popular' | 'rating' | 'newest' | 'duration')}
                      className="p-2 border-2 border-gray-200 rounded-lg text-sm focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="popular">Mais Populares</option>
                      <option value="rating">Melhor Avaliados</option>
                      <option value="newest">Mais Recentes</option>
                      <option value="duration">Menor Dura√ß√£o</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>

            {/* Experiments Grid */}
            <div className={
              viewMode === 'grid' 
                ? "grid md:grid-cols-2 xl:grid-cols-3 gap-6" 
                : "space-y-4"
            }>
              {filteredExperiments.map((experiment) => (
                <ExperimentCard
                  key={experiment.id}
                  experiment={experiment}
                  onSelect={() => setSelectedExperiment(experiment)}
                  onPreview={() => console.log('Preview:', experiment.title)}
                />
              ))}
            </div>

            {/* Empty State */}
            {filteredExperiments.length === 0 && (
              <div className="bg-white rounded-2xl p-12 shadow-lg border border-gray-100 text-center">
                <div className="text-6xl mb-6">üîç</div>
                <h3 className="text-2xl font-bold text-gray-900 mb-4">
                  Nenhum experimento encontrado
                </h3>
                <p className="text-gray-600 mb-8 max-w-md mx-auto">
                  Tente ajustar os filtros ou usar palavras-chave diferentes para encontrar experimentos.
                </p>
                <button 
                  onClick={() => {
                    setSearchQuery('')
                    setSelectedCategory('all')
                    setSelectedDifficulty('all')
                    setSelectedSafety('all')
                  }}
                  className="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors font-medium"
                >
                  Limpar Filtros
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Experiment Details Modal */}
      {selectedExperiment && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-gray-900">{selectedExperiment.title}</h2>
              <button
                onClick={() => setSelectedExperiment(null)}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="h-6 w-6" />
              </button>
            </div>
            <div className="p-6">
              <p className="text-gray-600 mb-6">{selectedExperiment.description}</p>
              
              <div className="grid md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h3 className="font-bold text-gray-900 mb-3">Objetivos</h3>
                  <ul className="space-y-2">
                    {selectedExperiment.objectives.map((objective, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <Target className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                        <span className="text-sm text-gray-700">{objective}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="font-bold text-gray-900 mb-3">Equipamentos</h3>
                  <ul className="space-y-2">
                    {selectedExperiment.equipment.slice(0, 5).map((item, index) => (
                      <li key={index} className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-sm text-gray-700">{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6">
                <h3 className="font-bold text-gray-900 mb-3">Teoria Relacionada</h3>
                <p className="text-gray-700 text-sm leading-relaxed">
                  {selectedExperiment.theory}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
